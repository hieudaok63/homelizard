// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider = "sqlite"
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Post {
  id      String @id @default(cuid())
  title   String
  content String
}

model User {
  id            String       @id @default(cuid())
  externalId    String       @unique @map("user_id")
  email         String       @unique
  firstName     String       @map("first_name")
  lastName      String       @map("last_name")
  middleName    String?      @map("middle_name")
  gender        String
  suffix        String?
  title         String?
  birthday      DateTime?
  mobilePhone   String?      @map("mobile_phone")
  website       String?
  favorites     Favorite[]
  customers     Customer[]
  address       Address?     @relation(fields: [addressId], references: [id])
  addressId     String?
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  placeOfWork   PlaceOfWork? @relation(fields: [placeOfWorkId], references: [id])
  placeOfWorkId String?
  file          File[]
}

model Customer {
  id            String          @id @default(cuid())
  users         User[]
  SearchProfile SearchProfile[]
}

model Address {
  id               String             @id @default(cuid())
  street           String
  city             String
  zipCode          String
  country          String
  user             User[]
  realEstateObject RealEstateObject[]
  searchProfile    SearchProfile[]
  placeOfWork      PlaceOfWork[]
}

model SearchProfile {
  id                      String         @id @default(cuid())
  objectType              String         @map("object_type")
  livingAreaSize          Int            @map("living_area_size")
  latitude                Float
  longitude               Float
  radius                  Int
  plotSize                Float          @map("plot_size")
  roomAmount              Int            @map("room_amount")
  startYearOfConstruction Int            @map("start_year_of_construction")
  endYearOfConstruction   Int            @map("end_year_of_construction")
  availability            DateTime
  purchaseType            String         @map("purchase_type")
  minPrice                Float          @map("min_price")
  maxPrice                Float          @map("max_price")
  address                 Address?       @relation(fields: [addressId], references: [id])
  addressId               String?
  searchResult            SearchResult[]
  objectStyles            String[]
  customer                Customer       @relation(fields: [customerId], references: [id])
  customerId              String
}

model Favorite {
  id String @id @default(cuid())

  searchResult   SearchResult @relation(fields: [searchResultId], references: [id])
  searchResultId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([searchResultId, userId])
}

model SearchResult {
  id String @id @default(cuid())

  searchProfileId    String
  realEstateObjectId String

  searchProfile SearchProfile    @relation(fields: [searchProfileId], references: [id])
  realEstate    RealEstateObject @relation(fields: [realEstateObjectId], references: [id])
  createdAt     DateTime         @default(now()) @map("created_at")
  updatedAt     DateTime         @updatedAt @map("updated_at")
  favorite      Favorite[]

  @@unique([searchProfileId, realEstateObjectId])
}

model RealEstateObject {
  id               String         @id @default(cuid())
  title            String
  objectType       String         @map("object_type")
  numberOfFloor    Int            @map("number_of_floor")
  livingAreaSize   Float          @map("living_area_size")
  plotSize         Float          @map("plot_size")
  numberOfBedroom  Int            @map("number_of_bedroom")
  numberOfBathroom Int            @map("number_of_bathroom")
  roomAmount       Int            @map("room_amount")
  description      String
  price            Int
  imageUrl         String         @map("image_url")
  address          Address?       @relation(fields: [addressId], references: [id])
  addressId        String?
  searchResult     SearchResult[]
}

model File {
  id        String   @id @default(cuid())
  url       String
  blobName  String?
  cvType    String   @map("cv_type")
  fileType  String   @map("file_type")
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model PlaceOfWork {
  id        String   @id @default(cuid())
  position  String
  company   String
  since     DateTime
  phone     String
  email     String
  web       String
  address   Address? @relation(fields: [addressId], references: [id])
  addressId String?

  User User[]
}
