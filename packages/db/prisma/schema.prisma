// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider = "postgresql"
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Post {
  id      String @id @default(cuid())
  title   String
  content String
}

model User {
  id         String     @id @default(cuid())
  externalId String     @unique @map("user_id")
  email      String     @unique
  firstName  String     @map("first_name")
  lastName   String     @map("last_name")
  gender     String
  customers  Customer[]
  favorites  Favorite[]
  address    Address?   @relation(fields: [addressId], references: [id])
  addressId  String?
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")
}

model Customer {
  id            String          @id @default(cuid())
  users         User[]
  SearchProfile SearchProfile[]
}

model Address {
  id               String             @id @default(cuid())
  street           String
  city             String
  zipCode          String
  country          String
  user             User[]
  realEstateObject RealEstateObject[]
  searchProfile    SearchProfile[]
}

model SearchProfile {
  id                      String         @id @default(cuid())
  objectType              String         @map("object_type")
  objectStyle             String         @map("object_style")
  livingAreaSize          Int            @map("living_area_size")
  latitude                Float
  longitude               Float
  radius                  Int
  plotSize                Float          @map("plot_size")
  roomAmount              Int            @map("room_amount")
  startYearOfConstruction Int            @map("start_year_of_construction")
  endYearOfConstruction   Int            @map("end_year_of_construction")
  availability            DateTime
  address                 Address?       @relation(fields: [addressId], references: [id])
  addressId               String?
  searchResult            SearchResult[]
  customer                Customer       @relation(fields: [customerId], references: [id])
  customerId              String
}

model Favorite {
  id String @id @default(cuid())

  searchResult   SearchResult @relation(fields: [searchResultId], references: [id])
  searchResultId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([searchResultId, userId])
}

model SearchResult {
  id String @id @default(cuid())

  searchProfileId    String
  realEstateObjectId String

  searchProfile SearchProfile    @relation(fields: [searchProfileId], references: [id])
  realEstate    RealEstateObject @relation(fields: [realEstateObjectId], references: [id])

  favorite Favorite[]

  @@unique([searchProfileId, realEstateObjectId])
}

model RealEstateObject {
  id               String         @id @default(cuid())
  title            String
  objectType       String         @map("object_type")
  numberOfFloor    Int            @map("number_of_floor")
  livingAreaSize   Float          @map("living_area_size")
  plotSize         Float          @map("plot_size")
  numberOfBedroom  Int            @map("number_of_bedroom")
  numberOfBathroom Int            @map("number_of_bathroom")
  roomAmount       Int            @map("room_amount")
  description      String
  price            Int
  address          Address?       @relation(fields: [addressId], references: [id])
  addressId        String?
  searchResult     SearchResult[]
}
